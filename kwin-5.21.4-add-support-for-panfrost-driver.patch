diff -up kwin-5.22.90/src/effects/backgroundcontrast/contrast.cpp.2~ kwin-5.22.90/src/effects/backgroundcontrast/contrast.cpp
--- kwin-5.22.90/src/effects/backgroundcontrast/contrast.cpp.2~	2021-09-16 10:41:27.000000000 +0200
+++ kwin-5.22.90/src/effects/backgroundcontrast/contrast.cpp	2021-09-16 18:51:38.337699199 +0200
@@ -263,6 +263,8 @@ bool ContrastEffect::enabledByDefault()
         return false;
     if (gl->isPanfrost() && gl->chipClass() <= MaliT8XX)
         return false;
+    if (gl->isLima() || gl->isVideoCore4() || gl->isVideoCore3D())
+        return false;
     if (gl->isSoftwareEmulation()) {
         return false;
     }
diff -up kwin-5.22.90/src/effects/blur/blur.cpp.2~ kwin-5.22.90/src/effects/blur/blur.cpp
--- kwin-5.22.90/src/effects/blur/blur.cpp.2~	2021-09-16 10:41:27.000000000 +0200
+++ kwin-5.22.90/src/effects/blur/blur.cpp	2021-09-16 18:51:38.337699199 +0200
@@ -360,6 +360,13 @@ bool BlurEffect::enabledByDefault()
     if (gl->isPanfrost() && gl->chipClass() <= MaliT8XX) {
         return false;
     }
+    // As of Linux 5.12, Mesa 21.1, the blur effect works
+    // but is painfully slow (FPS < 5) on Mali and VideoCore
+    if ( gl->isLima() ||
+         gl->isVideoCore4() ||
+         gl->isVideoCore3D()) {
+        return false;
+    }
     if (gl->isSoftwareEmulation()) {
         return false;
     }
diff -up kwin-5.22.90/src/libkwineffects/kwinglplatform.cpp.2~ kwin-5.22.90/src/libkwineffects/kwinglplatform.cpp
--- kwin-5.22.90/src/libkwineffects/kwinglplatform.cpp.2~	2021-09-16 10:41:27.000000000 +0200
+++ kwin-5.22.90/src/libkwineffects/kwinglplatform.cpp	2021-09-16 18:55:08.953288482 +0200
@@ -482,17 +482,13 @@ static ChipClass detectQualcommClass(con
     if (ok) {
         if (value >= 100 && value < 200) {
             return Adreno1XX;
-        }
-        if (value >= 200 && value < 300) {
+        } else if (value >= 200 && value < 300) {
             return Adreno2XX;
-        }
-        if (value >= 300 && value < 400) {
+        } else if (value >= 300 && value < 400) {
             return Adreno3XX;
-        }
-        if (value >= 400 && value < 500) {
+        } else if (value >= 400 && value < 500) {
             return Adreno4XX;
-        }
-        if (value >= 500 && value < 600) {
+        } else if (value >= 500 && value < 600) {
             return Adreno5XX;
         }
     }
@@ -518,6 +514,37 @@ static ChipClass detectPanfrostClass(con
     return UnknownPanfrost;
 }
 
+static ChipClass detectLimaClass(const QByteArray &chipClass)
+{
+
+    if (chipClass.contains("400"))
+        return Mali400;
+    else if (chipClass.contains("450"))
+        return Mali450;
+    else if (chipClass.contains("470"))
+        return Mali470;
+
+    return UnknownLima;
+}
+
+static ChipClass detectVC4Class(const QByteArray &chipClass)
+{
+
+    if (chipClass.contains("2.1"))
+        return VC4_2_1;
+
+    return UnknownVideoCore4;
+}
+
+static ChipClass detectV3DClass(const QByteArray &chipClass)
+{
+
+    if (chipClass.contains("4.2"))
+        return V3D_4_2;
+
+    return UnknownVideoCore3D;
+}
+
 QString GLPlatform::versionToString(qint64 version)
 {
     return QString::fromLatin1(versionToString8(version));
@@ -580,7 +607,12 @@ QByteArray GLPlatform::driverToString8(D
         return QByteArrayLiteral("Virgl (virtio-gpu, Qemu/KVM guest)");
     case Driver_Panfrost:
         return QByteArrayLiteral("Panfrost");
-
+    case Driver_Lima:
+        return QByteArrayLiteral("Mali (Lima)");
+    case Driver_VC4:
+        return QByteArrayLiteral("VideoCore IV");
+    case Driver_V3D:
+        return QByteArrayLiteral("VideoCore 3D");
     default:
         return QByteArrayLiteral("Unknown");
     }
@@ -880,7 +912,23 @@ void GLPlatform::detect(OpenGLPlatformIn
     else if (m_renderer.contains("Panfrost")) {
         m_driver = Driver_Panfrost;
         m_chipClass = detectPanfrostClass(m_renderer);
-     }
+    }
+
+
+    else if (m_renderer.contains("Mali")) {
+        m_driver = Driver_Lima;
+        m_chipClass = detectLimaClass(m_renderer);
+    }
+
+    else if (m_renderer.startsWith("VC4 ")) {
+        m_driver = Driver_VC4;
+	m_chipClass = detectVC4Class(m_renderer);
+    }
+
+    else if(m_renderer.startsWith("V3D ")) {
+        m_driver = Driver_V3D;
+	m_chipClass = detectV3DClass(m_renderer);
+    }
 
     else if (m_renderer == "Software Rasterizer") {
         m_driver = Driver_Swrast;
@@ -1007,6 +1055,7 @@ void GLPlatform::detect(OpenGLPlatformIn
         else if (m_renderer == "virgl") {
             m_driver = Driver_Virgl;
         }
+
     }
 
     // Driver/GPU specific features
@@ -1081,6 +1130,26 @@ void GLPlatform::detect(OpenGLPlatformIn
 
     if (isPanfrost()) {
         m_recommendedCompositor = OpenGLCompositing;
+        if (m_chipClass <= MaliT8XX) {
+            // As of Linux 5.12, Mesa 21.1, GLSL works but causes dramatic FPS drop on this GPU
+            m_supportsGLSL = false;
+        }
+    }
+
+    if (isLima()) {
+        m_recommendedCompositor = OpenGLCompositing;
+        // As of Linux 5.12, Mesa 21.1, GLSL works but causes dramatic FPS drop on this GPU
+        m_supportsGLSL = false;
+    }
+
+    if (isVideoCore4()) {
+        // As of Linux 5.12, Mesa 21.1, OpenGL works, but is much slower than QPainter
+        m_recommendedCompositor = QPainterCompositing;
+    }
+
+    if (isVideoCore3D()) {
+        // As of Linux 5.12, Mesa 21.1, OpenGL works, but is much slower than QPainter
+        m_recommendedCompositor = QPainterCompositing;
     }
 
     if (isMesaDriver() && platformInterface == EglPlatformInterface) {
@@ -1308,6 +1377,21 @@ bool GLPlatform::isPanfrost() const
     return m_chipClass >= MaliT7XX && m_chipClass <= UnknownPanfrost;
 }
 
+bool GLPlatform::isLima() const
+{
+    return m_chipClass >= Mali400 && m_chipClass <= UnknownLima;
+}
+
+bool GLPlatform::isVideoCore4() const
+{
+    return m_chipClass >= VC4_2_1 && m_chipClass <= UnknownVideoCore4;
+}
+
+bool GLPlatform::isVideoCore3D() const
+{
+    return m_chipClass >= V3D_4_2 && m_chipClass <= UnknownVideoCore3D;
+}
+
 const QByteArray &GLPlatform::glRendererString() const
 {
     return m_renderer;
diff -up kwin-5.22.90/src/libkwineffects/kwinglplatform.h.2~ kwin-5.22.90/src/libkwineffects/kwinglplatform.h
--- kwin-5.22.90/src/libkwineffects/kwinglplatform.h.2~	2021-09-16 10:41:27.000000000 +0200
+++ kwin-5.22.90/src/libkwineffects/kwinglplatform.h	2021-09-16 18:51:38.337699199 +0200
@@ -94,6 +94,9 @@ enum Driver {
     Driver_RadeonSI,
     Driver_Virgl,
     Driver_Panfrost,
+    Driver_Lima,
+    Driver_VC4,
+    Driver_V3D,
     Driver_Unknown,
 };
 
@@ -164,6 +167,21 @@ enum ChipClass {
     MaliGXX,                // GLES3.0
     UnknownPanfrost = 4999,
 
+    // Lima Mali
+    // from https://docs.mesa3d.org/drivers/lima.html
+    Mali400       = 5000,
+    Mali450,
+    Mali470,
+    UnknownLima = 5999,
+
+    // Broadcom VideoCore IV (e.g. Raspberry Pi 0 to 3), GLES 2.0/2.1 with caveats
+    VC4_2_1       = 6000, // Found in Raspberry Pi 3B+
+    UnknownVideoCore4 = 6999,
+
+    // Broadcom VideoCore 3D (e.g. Raspberry Pi 4, Raspberry Pi 400)
+    V3D_4_2       = 7000, // Found in Raspberry Pi 400
+    UnknownVideoCore3D = 7999,
+
     UnknownChipClass = 99999,
 };
 // clang-format on
@@ -315,6 +333,24 @@ public:
      **/
     bool isPanfrost() const;
 
+     /**
+     * @returns @c true if the GPU is a Mali GPU supported by the Lima driver (Mali 400, 450)
+     * @since 5.22.1
+     **/
+    bool isLima() const;
+
+    /**
+     * @returns @c true if the GPU is a Broadcom VideoCore IV (e.g. Raspberry Pi 0 to 3)
+     * @since 5.22.1
+     **/
+    bool isVideoCore4() const;
+
+    /**
+     * @returns @c true if the GPU is a Broadcom VideoCore 3D (e.g. Raspberry Pi 4, 400)
+     * @since 5.22.1
+     **/
+    bool isVideoCore3D() const;
+
     /**
      * @returns the GL_VERSION string as provided by the driver.
      * @since 4.9
